0:	input_addr
4:	output_addr
8:	alligment
136:	_start
156:	multiply
162:	multiply_do
172:	factorial
178:	factorial_while
209:	factorial_finish
---
mem[0..3]: 	80 00 00 00	@"input_addr"
mem[4..7]: 	84 00 00 00	@"output_addr"
mem[8..135]: 	2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00 2e 00 00 00	@"alligment"
mem[136..140]: 	FetchP 0 	@_start
mem[141..141]: 	AStore
mem[142..142]: 	Fetch
mem[143..147]: 	Call 172
mem[148..152]: 	FetchP 4
mem[153..153]: 	AStore
mem[154..154]: 	Store
mem[155..155]: 	Halt
mem[156..160]: 	Lit 31 	@multiply
mem[161..161]: 	RPush
mem[162..162]: 	MulStep 	@multiply_do
mem[163..167]: 	Next 162
mem[168..168]: 	Drop
mem[169..169]: 	Drop
mem[170..170]: 	AFetch
mem[171..171]: 	Return
mem[172..176]: 	Lit 1 	@factorial
mem[177..177]: 	Over
mem[178..178]: 	Dup 	@factorial_while
mem[179..183]: 	If 209
mem[184..184]: 	Dup
mem[185..185]: 	AStore
mem[186..186]: 	Over
mem[187..191]: 	Lit 0
mem[192..196]: 	Call 156
mem[197..197]: 	Over
mem[198..202]: 	Lit (-1)
mem[203..203]: 	Add
mem[204..208]: 	Jump 178
mem[209..209]: 	Drop 	@factorial_finish
mem[210..210]: 	Return
---
